########################################################################################
# Project: SmartTraffic_Lakehouse_for_HCMC
# Author: Nguyen Trung Nghia (ren294)
# Contact: trungnghia294@gmail.com
# GitHub: Ren294
########################################################################################

x-airflow-common: &airflow-common
  image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:2.9.3}
  environment: &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis_airflow:6379/0
    AIRFLOW__CORE__FERNET_KEY: ""
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: "true"
    AIRFLOW__CORE__LOAD_EXAMPLES: "false"
    AIRFLOW__API__AUTH_BACKENDS: "airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session"
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: "true"
    _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-}
  volumes:
    - ${AIRFLOW_PROJ_DIR:-.}/dags:/opt/airflow/dags
    - ${AIRFLOW_PROJ_DIR:-.}/logs:/opt/airflow/logs
    - ${AIRFLOW_PROJ_DIR:-.}/config:/opt/airflow/config
    - ${AIRFLOW_PROJ_DIR:-.}/plugins:/opt/airflow/plugins
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on: &airflow-common-depends-on
    redis_airflow:
      condition: service_healthy
    postgres:
      condition: service_healthy

services:
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always
    networks:
      - ren294_network
    profiles:
      - airflow
      - fss
      - fs2
      - a1
      - a2
      - fss1

  redis_airflow:
    image: redis:7.2-bookworm
    hostname: redis_airflow
    expose:
      - 6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 30s
      retries: 50
      start_period: 30s
    restart: always
    networks:
      - ren294_network
    profiles:
      - airflow
      - all
      - fss
      - fs2
      - a1
      - a2
      - fss1

  airflow-webserver:
    <<: *airflow-common
    command: webserver
    container_name: airflow-webserver
    hostname: airflow-webserver
    ports:
      - "6060:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      - ren294_network
    profiles:
      - airflow
      - all
      - fss
      - fs2
      - a1
      - a2
      - fss1

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      - ren294_network
    profiles:
      - airflow
      - all
      - fss
      - fs2
      - a1
      - a2
      - fss1

  airflow-worker:
    <<: *airflow-common
    command: celery worker
    healthcheck:
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.providers.celery.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}" || celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    environment:
      <<: *airflow-common-env
      DUMB_INIT_SETSID: "0"
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      - ren294_network
    profiles:
      - airflow
      - all
      - fss
      - fs2
      - a1
      - a2
      - fss1

  airflow-triggerer:
    <<: *airflow-common
    command: triggerer
    healthcheck:
      test:
        [
          "CMD-SHELL",
          'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"',
        ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      - ren294_network
    profiles:
      - airflow
      - all
      - fss
      - fs2
      - a1
      - a2
      - fss1

  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    command:
      - -c
      - |
        if [[ -z "${AIRFLOW_UID}" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
          echo "If you are on Linux, you SHOULD follow the instructions below to set "
          echo "AIRFLOW_UID environment variable, otherwise files will be owned by root."
          echo "For other operating systems you can get rid of the warning with manually created .env file:"
          echo "    See: https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#setting-the-right-airflow-user"
          echo
        fi
        one_meg=1048576
        mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
        cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
        disk_available=$$(df / | tail -1 | awk '{print $$4}')
        warning_resources="false"
        if (( mem_available < 4000 )) ; then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough memory available for Docker.\e[0m"
          echo "At least 4GB of memory required. You have $$(numfmt --to iec $$((mem_available * one_meg)))"
          echo
          warning_resources="true"
        fi
        if (( cpus_available < 2 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough CPUS available for Docker.\e[0m"
          echo "At least 2 CPUs recommended. You have $${cpus_available}"
          echo
          warning_resources="true"
        fi
        if (( disk_available < one_meg * 10 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough Disk space available for Docker.\e[0m"
          echo "At least 10 GBs recommended. You have $$(numfmt --to iec $$((disk_available * 1024 )))"
          echo
          warning_resources="true"
        fi
        if [[ $${warning_resources} == "true" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: You have not enough resources to run Airflow (see above)!\e[0m"
          echo "Please follow the instructions to increase amount of resources available:"
          echo "   https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#before-you-begin"
          echo
        fi
        mkdir -p /sources/logs /sources/dags /sources/plugins
        chown -R "${AIRFLOW_UID}:0" /sources/{logs,dags,plugins}
        exec /entrypoint airflow version
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_MIGRATE: "true"
      _AIRFLOW_WWW_USER_CREATE: "true"
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
      _PIP_ADDITIONAL_REQUIREMENTS: ""
    user: "0:0"
    volumes:
      - ${AIRFLOW_PROJ_DIR:-.}:/sources
    networks:
      - ren294_network
    profiles:
      - airflow
      - all
      - fss
      - fs2
      - a1
      - a2
      - fss1

  airflow-cli:
    <<: *airflow-common
    profiles:
      - debug
    environment:
      <<: *airflow-common-env
      CONNECTION_CHECK_MAX_COUNT: "0"
    command:
      - bash
      - -c
      - airflow
      - all
    networks:
      - ren294_network

  flower:
    <<: *airflow-common
    command: celery flower
    profiles:
      - flower
      - all
      - fs
      - fs2
    ports:
      - "5555:5555"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:5555/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      - ren294_network

  postgres-traffic:
    image: postgres:13
    container_name: db-traffic
    hostname: postgres_traffic
    ports:
      - "5431:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=traffic
    volumes:
      - ./postgresDB/postgres_init/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./postgresDB/postgres_init/restore.sh:/docker-entrypoint-initdb.d/restore_schemas.sh
      - ./postgresDB/backup/:/home/
      - ./postgresDB/postgres_init/postgresql.conf:/etc/postgresql/postgresql.conf
    restart: always
    command: ["postgres", "-c", "wal_level=logical"]
    healthcheck:
      test: ["CMD", "psql", "-U", "postgres", "-c", "SELECT 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ren294_network
    profiles:
      - db
      - one1
      - etl
      - fss
      - a2
      - a3
      - a4

  schema-registry:
    image: confluentinc/cp-schema-registry:7.3.10
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      broker:
        condition: service_healthy
    ports:
      - "8084:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: broker:29092
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
    healthcheck:
      start_period: 10s
      interval: 10s
      retries: 20
      test: curl --user superUser:superUser --fail --silent --insecure http://localhost:8081/subjects --output /dev/null || exit 1
    networks:
      - ren294_network
    profiles:
      - one
      - ex1
      - fs1
      - fs2
      - one1
      - a2
      - a3
      - fss1

  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.10
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2180:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: echo srvr | nc zookeeper 2181 || exit 1
      start_period: 10s
      retries: 20
      interval: 10s
    networks:
      - ren294_network
    profiles:
      - one
      - ex1
      - fs1
      - fs2
      - one1
      - a2
      - a3
      - fss1

  broker:
    image: confluentinc/cp-kafka:7.3.10
    hostname: broker
    container_name: broker
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "29092:29092"
      - "9092:9092"
      - "9101:9101"
    # volumes:
    #   - ./kafka/data:/var/lib/kafka/data
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
    healthcheck:
      test: nc -z localhost 9092 || exit -1
      start_period: 15s
      interval: 5s
      timeout: 10s
      retries: 10
    networks:
      - ren294_network
    profiles:
      - one
      - ex1
      - fs1
      - fs2
      - one1
      - a2
      - a3
      - fss1

  rest-proxy:
    image: confluentinc/cp-kafka-rest:7.3.10
    depends_on:
      broker:
        condition: service_healthy
    ports:
      - "8082:8082"
    hostname: rest-proxy
    container_name: rest-proxy
    environment:
      KAFKA_REST_HOST_NAME: rest-proxy
      KAFKA_REST_BOOTSTRAP_SERVERS: "broker:29092"
      KAFKA_REST_LISTENERS: "http://0.0.0.0:8082"
    networks:
      - ren294_network
    profiles:
      - one
      - ex1
      - fs1
      - fs2
      - one1
      - a2
      - a3
      - fss1

  redpanda:
    image: redpandadata/console:v2.7.1
    container_name: redpanda
    depends_on:
      - broker
    ports:
      - 1010:8080
    environment:
      - KAFKA_BROKERS=broker:29092
    networks:
      - ren294_network
    profiles:
      - redpanda
      - ex1
      - one
      - fs1
      - fs2
      - one1
      - a2
      - a3
      - fss1

  debezium:
    image: debezium/connect:3.0.0.Final
    restart: always
    container_name: debezium
    hostname: debezium
    depends_on:
      postgres-traffic:
        condition: service_healthy
      broker:
        condition: service_healthy
    ports:
      - "8083:8083"
    environment:
      BOOTSTRAP_SERVERS: broker:29092
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: connect_configs
      STATUS_STORAGE_TOPIC: connect_statuses
      OFFSET_STORAGE_TOPIC: connect_offsets
      KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      ENABLE_DEBEZIUM_SCRIPTING: "true"
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "--silent",
          "--fail",
          "-X",
          "GET",
          "http://localhost:8083/connectors",
        ]
      start_period: 10s
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ren294_network
    profiles:
      - one
      - a2
      - a3

  debezium-ui:
    image: debezium/debezium-ui:2.2
    restart: always
    container_name: debezium-ui
    hostname: debezium-ui
    depends_on:
      debezium:
        condition: service_healthy
    ports:
      - "8080:8080"
    environment:
      KAFKA_CONNECT_URIS: http://debezium:8083
    networks:
      - ren294_network
    profiles:
      - one
      - a2
      - a3

  nifi:
    image: nghia294/nifi:1.27
    container_name: nifi
    hostname: nifi
    ports:
      - 8443:8443
    volumes:
      - ./nifi/nifi-current/database_repository:/opt/nifi/nifi-current/database_repository
      - ./nifi/nifi-current/flowfile_repository:/opt/nifi/nifi-current/flowfile_repository
      - ./nifi/nifi-current/content_repository:/opt/nifi/nifi-current/content_repository
      - ./nifi/nifi-current/provenance_repository:/opt/nifi/nifi-current/provenance_repository
      - ./nifi/nifi-current/state:/opt/nifi/nifi-current/state
      - ./nifi/nifi-current/logs:/opt/nifi/nifi-current/logs
      - ./nifi/data:/home/data
      - ./nifi/config:/home/config
    environment:
      NIFI_WEB_HTTP_PORT: 8443
      NIFI_SECURITY_USER_AUTHORIZER: single-user-authorizer
      NIFI_SECURITY_USER_LOGIN_IDENTITY_PROVIDER: single-user-provider
      NIFI_SECURITY_ALLOW_ANONYMOUS_AUTHENTICATION: true
    networks:
      - ren294_network
    profiles:
      - nifi
      - ex1
      - one
      - fs
      - fs1
      - fs2
      - one1
      - fss1

  minio:
    container_name: storage
    image: minio/minio
    hostname: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: ren294
      MINIO_ROOT_PASSWORD: trungnghia294
    volumes:
      - ./minio/data:/data
    command: server /data --console-address ":9001"
    networks:
      - ren294_network
    profiles:
      - minio
      - nifi
      - etl
      - one
      - ex1
      - fs
      - fs2
      - a1
      - a2
      - aa
      - fss
      - fss1
      - hive

  lakefs:
    image: treeverse/lakefs:1.40
    container_name: lakefs
    hostname: lakefs
    depends_on:
      - minio
      - lakefs-db
    ports:
      - 1111:8000
    restart: always
    networks:
      - ren294_network
    volumes:
      - ./lakeFs/actions:/home/actions
      - ./lakeFs/script:/home/script
      - ./lakeFs/auth/lakectl.yaml:/home/lakefs/.lakectl.yaml
    environment:
      LAKEFS_DATABASE_TYPE: postgres
      LAKEFS_DATABASE_POSTGRES_CONNECTION_STRING: postgres://postgres:postgres@lakefs-db:5432/postgres
      LAKEFS_BLOCKSTORE_TYPE: s3
      LAKEFS_BLOCKSTORE_S3_FORCE_PATH_STYLE: true
      LAKEFS_BLOCKSTORE_S3_ENDPOINT: http://minio:9000
      LAKEFS_BLOCKSTORE_S3_DISCOVER_BUCKET_REGION: false
      LAKEFS_BLOCKSTORE_S3_CREDENTIALS_ACCESS_KEY_ID: ren294
      LAKEFS_BLOCKSTORE_S3_CREDENTIALS_SECRET_ACCESS_KEY: trungnghia294
      LAKEFS_AUTH_ENCRYPT_SECRET_KEY: ren294
      LAKEFS_INSTALLATION_ACCESS_KEY_ID: ren294
      LAKEFS_INSTALLATION_SECRET_ACCESS_KEY: trungnghia294
    profiles:
      - fs
      - fs2
      - a1
      - a2
      - aa
      - fss
      - fss1
      - hive

  lakefs-db:
    image: postgres:13
    container_name: lakefs-db
    hostname: lakefs-db
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - ./lakeFs/data:/var/lib/postgresql/data
    networks:
      - ren294_network
    profiles:
      - fs
      - fs2
      - a1
      - a2
      - aa
      - fss
      - fss1
      - hive

  jobmanager:
    image: flink:java8
    container_name: flink-jobmanager
    ports:
      - "8085:8081"
    command: jobmanager
    volumes:
      - ./flink/job/:/opt/flink/usrlib/
      # - ./flink/config/flink-conf.yaml:/opt/flink/conf/flink-conf.yaml
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: jobmanager
        s3.endpoint: http://minio:9000
        s3.path.style.access: true
        s3.access-key: ren294
        s3.secret-key: trungnghia294
        fs.s3a.endpoint: http://minio:9000
        fs.s3a.access.key: ren294
        fs.s3a.secret.key: trungnghia294
        fs.s3a.path.style.access: true
        fs.s3a.connection.ssl.enabled: false
    networks:
      - ren294_network
    profiles:
      - flink
      - ex1
      - one
      - fs1
      - fs2
      - one1
      - a3
      - fss1

  taskmanager:
    image: flink:java8
    container_name: flink-taskmanager
    depends_on:
      - jobmanager
    command: taskmanager
    scale: 1
    # volumes:
    #   - ./flink/config/flink-conf.yaml:/opt/flink/conf/flink-conf.yaml
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: jobmanager
        taskmanager.numberOfTaskSlots: 2
        s3.endpoint: http://minio:9000
        s3.path.style.access: true
        s3.access-key: ren294
        s3.secret-key: trungnghia294
        fs.s3a.endpoint: http://minio:9000
        fs.s3a.access.key: ren294
        fs.s3a.secret.key: trungnghia294
        fs.s3a.path.style.access: true
        fs.s3a.connection.ssl.enabled: false
    networks:
      - ren294_network
    profiles:
      - flink
      - ex1
      - one
      - fs1
      - fs2
      - one1
      - a3
      - fss1

  redis:
    container_name: redis_traffic
    image: redis/redis-stack:7.4.0-v0-arm64
    ports:
      - 6379:6379
      - 13333:8001
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
    volumes:
      - ./redis/data:/data
    networks:
      - ren294_network
    profiles:
      - ex1
      - one
      - fss
      - fs1
      - fs2
      - one1
      - a1
      - a2
      - a3
      - fss1

  spark-master:
    image: nghia294/spark-arm64:v17.0
    container_name: spark-master
    hostname: spark-master
    ports:
      - "8090:8080"
      - "7077:7077"
      - "10003:10000"
      - "10004:10001"
    environment:
      - SPARK_MODE=master
      - SPARK_MASTER_HOST=spark-master
      - SPARK_HOME=/opt/spark
      - HIVE_CONF_DIR=/opt/hive/conf
      - HIVE_METASTORE_URI="thrift://hive-metastore:9083"
      - SPARK_MASTER_OPTS=-Dspark.deploy.defaultCores=1
      - SPARK_WORKER_CORES=6
      - SPARK_WORKER_MEMORY=12g
    volumes:
      # - spark_master_logs:/opt/spark/logs
      - ./spark/apps:/opt/spark-apps
      - ./spark/data:/opt/spark-data
      - ./hiveconf:/opt/hive/conf
      - ./sparkconfig:/opt/spark/conf
    networks:
      - ren294_network
    profiles:
      - hdp_spark
      - ex1
      - fs2
      - ch1
      - a1
      - a2
      - fss
      - fss1
      - hive

  spark-worker:
    image: nghia294/spark-arm64:v17.0
    container_name: spark-worker
    depends_on:
      - spark-master
    ports:
      - "8081:8081"
    environment:
      - SPARK_MASTER=spark://spark-master:7077
      - SPARK_WORKLOAD=worker
      - HIVE_CONF_DIR=/opt/hive/conf
      - HIVE_METASTORE_URI="thrift://hive-metastore:9083"
      - SPARK_WORKER_CORES=6
      - SPARK_WORKER_MEMORY=12g
      - SPARK_EXECUTOR_MEMORY=2g
    volumes:
      - ./hiveconf:/opt/hive/conf
    networks:
      - ren294_network
    profiles:
      - hdp_spark
      - ex1
      - fs2
      - ch1
      - a1
      - a2
      - fss
      - fss1
      - hive

  clickhouse-server:
    image: clickhouse/clickhouse-server:24
    container_name: clickhouse-server
    hostname: clickhouse-server
    ports:
      - "18123:8123"
      - "19000:9000"
    ulimits:
      nproc: 65535
      nofile:
        soft: 262144
        hard: 262144
    volumes:
      - ./clickhouse/data:/var/lib/clickhouse
      - ./clickhouse/logs:/var/log/clickhouse-server
      - ./clickhouse/config/config.xml:/etc/clickhouse-server/config.xml
      - ./clickhouse/config/users.xml:/etc/clickhouse-server/users.xml
      # - ./clickhouse/config/dev.xml:/etc/clickhouse-server/users.d/dev.xml
    environment:
      CLICKHOUSE_USER: ren294
      CLICKHOUSE_PASSWORD: trungnghia294
      CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT: 1
    networks:
      - ren294_network
    profiles:
      - ch

  ch-ui:
    image: ghcr.io/caioricciuti/ch-ui:latest
    restart: always
    depends_on:
      - clickhouse-server
    ports:
      - 5521:5521
    environment:
      VITE_CLICKHOUSE_URL: http://clickhouse-server:8123
      VITE_CLICKHOUSE_USER: ren294
      VITE_CLICKHOUSE_PASS: trungnghia294
    networks:
      - ren294_network
    profiles:
      - ch

  trino:
    image: trinodb/trino:465
    hostname: trino-coordinator
    ports:
      - "8080:8080"
    volumes:
      - ./trino/etc:/etc/trino
      # - ./trino/catalog:/etc/trino/catalog
      - ./trino/lib/hudi-trino-bundle-0.15.0.jar:/usr/lib/trino/plugin/hive/hudi-trino-bundle-0.15.0.jar
    networks:
      - ren294_network
    profiles:
      - hive

  metastore_db:
    image: postgres:13
    hostname: metastore_db
    ports:
      - 15432:5432
    environment:
      POSTGRES_USER: hive
      POSTGRES_PASSWORD: hive
      POSTGRES_DB: metastore
    volumes:
      - ./hive/metastore:/var/lib/postgresql/data
    networks:
      - ren294_network
    profiles:
      - hive

  # hive-metastore:
  #   image: apache/hive:4.0.0
  #   ports:
  #     - 9083:9083
  #   depends_on:
  #     - metastore_db
  #   container_name: hive-metastore
  #   hostname: hive-metastore
  #   environment:
  #     AWS_DEFAULT_REGION: us-east-1
  #     DB_DRIVER: postgres
  #     SERVICE_NAME: metastore
  #     SERVICE_OPTS:
  #       "-Xmx1G -Djavax.jdo.option.ConnectionDriverName=org.postgresql.Driver
  #       -Djavax.jdo.option.ConnectionURL=jdbc:postgresql://metastore_db:5432/metastore
  #       -Djavax.jdo.option.ConnectionUserName=hive
  #       -Djavax.jdo.option.ConnectionPassword=hive"
  #   volumes:
  #     - ./hiveconf:/opt/hive/conf
  #     - ./hive/lib/postgresql-42.7.4.jar:/opt/hive/lib/postgresql-42.7.4.jar
  #     - ./hive/lib/aws-java-sdk-bundle-1.11.1026.jar:/opt/hive/lib/aws-java-sdk-bundle-1.11.1026.jar
  #     - ./hive/lib/hadoop-aws-3.3.1.jar:/opt/hive/lib/hadoop-aws-3.3.1.jar
  #     - ./hive/lib/jets3t-0.9.4.jar:/opt/hive/lib/jets3t-0.9.4.jar
  #     - ./hive/lib/hudi-spark3.5-bundle_2.12-0.15.0.jar:/opt/hive/lib/hudi-spark3.5-bundle_2.12-0.15.0.jar
  #   networks:
  #     - ren294_network
  #   profiles:
  #     - hive
  hive-metastore:
    hostname: hive-metastore
    container_name: hive-metastore
    image: "starburstdata/hive:3.1.2-e.18"
    ports:
      - "9083:9083"
    environment:
      HIVE_INPUT_FORMAT: org.apache.hudi.hadoop.HoodieParquetInputFormat
      HIVE_METASTORE_DRIVER: org.postgresql.Driver
      HIVE_METASTORE_JDBC_URL: jdbc:postgresql://metastore_db:5432/metastore
      HIVE_METASTORE_USER: hive
      HIVE_METASTORE_PASSWORD: hive
      HIVE_METASTORE_WAREHOUSE_DIR: s3://gold/main/warehouse/
      S3_ENDPOINT: http://lakefs:8000
      S3_ACCESS_KEY: AKIAJC5AQUW4OXQYCRAQ
      S3_SECRET_KEY: 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
      S3_PATH_STYLE_ACCESS: "true"
      REGION: ""
      GOOGLE_CLOUD_KEY_FILE_PATH: ""
      AZURE_ADL_CLIENT_ID: ""
      AZURE_ADL_CREDENTIAL: ""
      AZURE_ADL_REFRESH_URL: ""
      AZURE_ABFS_STORAGE_ACCOUNT: ""
      AZURE_ABFS_ACCESS_KEY: ""
      AZURE_WASB_STORAGE_ACCOUNT: ""
      AZURE_ABFS_OAUTH: ""
      AZURE_ABFS_OAUTH_TOKEN_PROVIDER: ""
      AZURE_ABFS_OAUTH_CLIENT_ID: ""
      AZURE_ABFS_OAUTH_SECRET: ""
      AZURE_ABFS_OAUTH_ENDPOINT: ""
      AZURE_WASB_ACCESS_KEY: ""
      HIVE_METASTORE_USERS_IN_ADMIN_ROLE: "admin"
    depends_on:
      - metastore_db
    healthcheck:
      test: bash -c "exec 6<> /dev/tcp/localhost/9083"
    networks:
      - ren294_network
    profiles:
      - hive
networks:
  ren294_network:
    driver: bridge

volumes:
  postgres-db-volume:
